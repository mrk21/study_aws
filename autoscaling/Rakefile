require '../util'

desc 'Creates an auto scaling group'
task :create do
  # create a base instance
  ec2s = create_or_get_instance tag: 'test-autoscaling', on_create: ->(ec2s){
    ec2s.each{|ec2|
      ssh host: ec2['Instances'][0]['PublicDnsName'], cmd: 'sudo yum install -y nginx'
      ssh host: ec2['Instances'][0]['PublicDnsName'], cmd: 'sudo service nginx start'
      ssh host: ec2['Instances'][0]['PublicDnsName'], cmd: 'sudo chkconfig nginx on'
    }
  }
  
  sleep 5
  
  images = aws <<-SH, binding
    aws ec2 create-image
      --instance-id  <%= ec2s[0]['Instances'][0]['InstanceId'] %>
      --name         'test-autoscaling'
      --description  'test-autoscaling'
  SH
  
  loop do
    images = aws <<-SH, binding
      aws ec2 describe-images
        --filter  'Name=is-public,Values=false'
                  'Name=name,Values=test-autoscaling'
        --query   'Images[*]'
    SH
    break if images[0]['State'] == 'available'
    sleep 5
  end
  
  sleep 5
  
  subnets = aws <<-SH, binding
    aws ec2 describe-subnets
      --filters  'Name=tag-key,Values=Name'
                 'Name=tag-value,Values=default'
      --query    'Subnets[*]'
  SH
  
  security_gruop_ids = aws <<-SH
    aws ec2 describe-security-groups
      --filters  'Name=tag-key,Values=Name'
                 'Name=tag-value,Values=default'
      --query    'SecurityGroups[*].GroupId'
  SH
  
  # Creates an ELB
  elb = aws <<-SH, binding
    aws elb create-load-balancer
      --load-balancer-name  test-autoscaling
      --listeners           Protocol=HTTP,LoadBalancerPort=80,InstanceProtocol=HTTP,InstancePort=80
      --subnets             <%= subnets.map{|v| v['SubnetId']}.join(' ') %>
      --security-groups     <%= security_gruop_ids.join(' ') %>
  SH
  aws <<-SH, binding
    aws elb configure-health-check
      --load-balancer-name  test-autoscaling
      --health-check        Target=HTTP:80/,Interval=30,UnhealthyThreshold=2,HealthyThreshold=10,Timeout=10
  SH
  aws <<-SH, binding
    aws elb modify-load-balancer-attributes
      --load-balancer-name        test-autoscaling
      --load-balancer-attributes  '{"CrossZoneLoadBalancing": {"Enabled": true}}'
  SH
  
  sleep 5
  
  # Creates a launch configuration
  # @see 『Amazon Web Services実践入門』初版 技術評論社 p.293
  # @see [create-launch-configuration — AWS CLI 1.9.9 Command Reference]{@link http://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html}
  aws <<-SH, binding
    aws autoscaling create-launch-configuration
      --launch-configuration-name  test-autoscaling-configuration
      --image-id                   <%= images[0]['ImageId'] %>
      --security-groups            <%= security_gruop_ids.join(' ') %>
      --instance-type              t2.micro
  SH
  
  # Creates an auto scaling group
  # @see 『Amazon Web Services実践入門』初版 技術評論社 p.294
  aws <<-SH, binding
    aws autoscaling create-auto-scaling-group
      --auto-scaling-group-name    test-autoscaling-group
      --launch-configuration-name  test-autoscaling-configuration
      --min-size                   2
      --max-size                   4
      --desired-capacity           2
      --default-cooldown           300
      --load-balancer-names        test-autoscaling
      --health-check-type          ELB
      --health-check-grace-period  300
      --vpc-zone-identifier        <%= subnets.map{|v| v['SubnetId']}.join(',') %>
  SH
  
  # Creates a scaling policy [scale out]
  # @see 『Amazon Web Services実践入門』初版 技術評論社 p.295
  scale_out_policy = aws <<-SH, binding
    aws autoscaling put-scaling-policy
      --auto-scaling-group-name  test-autoscaling-group
      --policy-name              scale-out-policy
      --adjustment-type          ChangeInCapacity
      --scaling-adjustment       2
  SH
  
  # Creates a scaling policy [scale in]
  # @see 『Amazon Web Services実践入門』初版 技術評論社 p.295
  scale_in_policy = aws <<-SH, binding
    aws autoscaling put-scaling-policy
      --auto-scaling-group-name  test-autoscaling-group
      --policy-name              scale-in-policy
      --adjustment-type          ChangeInCapacity
      --scaling-adjustment       -2
  SH
  
  # Registers alerm for scale out policy
  # @see 『Amazon Web Services実践入門』初版 技術評論社 pp.295-296
  aws <<-SH, binding
    aws cloudwatch put-metric-alarm
      --alarm-name           test-autoscaling-scale-out
      --period               300
      --dimensions           Name=AutoScalingGroupName,Value=test-autoscaling-group
      --metric-name          CPUUtilization
      --namespace            AWS/EC2
      --statistic            Average
      --evaluation-periods   1
      --threshold            70.0
      --comparison-operator  GreaterThanOrEqualToThreshold
      --alarm-actions        <%= scale_out_policy['PolicyARN'] %>
  SH
  
  # Registers alerm for scale in policy
  # @see 『Amazon Web Services実践入門』初版 技術評論社 pp.295-296
  aws <<-SH, binding
    aws cloudwatch put-metric-alarm
      --alarm-name           test-autoscaling-scale-in
      --period               300
      --dimensions           Name=AutoScalingGroupName,Value=test-autoscaling-group
      --metric-name          CPUUtilization
      --namespace            AWS/EC2
      --statistic            Average
      --evaluation-periods   1
      --threshold            30.0
      --comparison-operator  LessThanOrEqualToThreshold
      --alarm-actions        <%= scale_in_policy['PolicyARN'] %>
  SH
end
